<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2014 wemove GmbH
    Licensed under the EUPL V.1.1

    This Software is provided to You under the terms of the European
    Union Public License (the "EUPL") version 1.1 as published by the
    European Union. Any use of this Software, other than as authorized
    under this License is strictly prohibited (to the extent such use
    is covered by a right of the copyright holder of this Software).

    This Software is provided under the License on an "AS IS" basis and
    without warranties of any kind concerning the Software, including
    without limitation merchantability, fitness for a particular purpose,
    absence of defects or errors, accuracy, and non-infringement of
    intellectual property rights other than copyright. This disclaimer
    of warranty is an essential part of the License and a condition for
    the grant of any rights to this Software.

    For more  details, see <http://joinup.ec.europa.eu/software/page/eupl>

-->

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
                http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd
                http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!-- import spring beans for the iPlug -->
    <!-- <import resource="spring.xml"/>  -->   
    
    <!-- the application context definition for the springapp DispatcherServlet -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
        <property name="prefix" value="/WEB-INF/jsp/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:messages_base</value>
				<value>classpath:messages</value>
			</list>
		</property>
		<property name="cacheSeconds" value="0" />
		<property name="fallbackToSystemLocale" value="false"></property>
    <property name="defaultEncoding">
      <value>UTF-8</value>
    </property>
	</bean>

    <!-- XML DEFINED BEANS WITH ACCORDING QUALIFIER TO BE AUTOWIRED VIA QUALIFIER ! -->

    <!-- Single parsers are injected explicitly (but created via annotation mechanism) -->
    <!-- Adapt number, type and order of parsers dependent from iPlug -->
    <bean class="de.ingrid.admin.search.QueryParsers">
        <qualifier value="XMLconfigured"/>
        <property name="queryParsers">
            <list>
                <ref bean="contentQueryParser" />
                <!-- NO datatype added to lucene query ! -->
                <!-- ref bean="dataTypeQueryParser" /-->
                <ref bean="titleQueryParser" />
                <ref bean="fieldQueryParserIGC" />
                <ref bean="rangeQueryParser" />
                <ref bean="wildCardFieldQueryParser" />
                <ref bean="allResultsOnEmptyQueryParser" />
            </list>
        </property>
    </bean>

    <!-- STEMMER: Create stemmer explicitly via xml ! Will be autowired to parsers, index writer ... ! -->
    <bean id="stemmerGERMAN" class="de.ingrid.admin.search.GermanStemmer"/>

    <!--
        Wraps one ore more lucene index reader. The wrapper is injected via
        XMLconfiguredIndexWrapper into IngridIndexSearcher constructor, so it
        can be updated in the configure phase.
    -->
    <bean id="indexWrapper" class="de.ingrid.search.utils.LuceneIndexReaderWrapper">
        <qualifier value="XMLconfiguredIndexWrapper" />
    </bean>

    <bean id="facetClassProducer" class="de.ingrid.search.utils.facet.FacetClassProducer">
        <property name="indexReaderWrapper">
            <ref bean="indexWrapper" />
        </property>
        <property name="queryParsers">
            <ref bean="de.ingrid.admin.search.QueryParsers" />
        </property>
    </bean>

    <bean id="facetClassRegisty" class="de.ingrid.search.utils.facet.FacetClassRegistry">
        <property name="facetClassProducer">
            <ref bean="facetClassProducer" />
        </property>
    </bean>

    <bean id="indexFacetCounter" class="de.ingrid.search.utils.facet.counter.IndexFacetCounter">
        <property name="facetClassRegistry">
            <ref bean="facetClassRegisty" />
        </property>
    </bean>

    <!--
        Wraps a plugdescription object. The wrapper implements IConfigurable
        and will be updated every time the configure phase takes place (i.e.
        after changing the iplug configuration).
    -->
    <bean id="plugDescriptionWrapper"
        class="de.ingrid.search.utils.ConfigurablePlugDescriptionWrapper" />

    <bean id="plugDescriptionFacetCounter"
        class="de.ingrid.search.utils.facet.counter.DscPlugdescriptionFacetCounter">
        <property name="plugDescriptionWrapper">
            <ref bean="plugDescriptionWrapper" />
        </property>
<!--         
        <property name="facetClassDefinitions">
            <list>
                <value></value>
            </list>
        </property>
 -->
    </bean>

    
    
    <!--
        Defines a facet definition filter. Will be applied before a facet 
        definition is analyzed. This construct is used in igc dsc scripted
        iPlug to map incompatible queries to compatible.
        
        See also de.ingrid.iplug.dscIGCTopicsSearchPreProcessor.

        This is IGC DB specific. Please comment for other databases.
    -->
    <bean id="configurableFacetDefinitionProcessors"
        class="de.ingrid.search.utils.facet.ConfigurableFacetClassProcessor" >
        <property name="facetFilterDefinitions">
            <map>
                <entry key="type:topic" value-ref="topicFilterDef"/>
            </map>                
        </property>
    </bean>

    <util:map id="topicFilterDef" key-type="java.lang.String">
        <entry key="datatype:topics" value="t01_object.is_catalog_data:y" />
    </util:map>

    
    <bean id="facetManager" class="de.ingrid.search.utils.facet.FacetManager">
        <property name="indexReaderWrapper">
            <ref bean="indexWrapper" />
        </property>
        <property name="queryParsers">
            <ref bean="de.ingrid.admin.search.QueryParsers" />
        </property>
        <property name="facetCounters">
            <list>
                <ref bean="plugDescriptionFacetCounter" />
                <ref bean="indexFacetCounter" />
            </list>
        </property>
	    <!--
            This is IGC DB specific. Please comment for other databases.
	    -->
        <property name="facetDefinitionProcessors">
            <list>
                <ref bean="configurableFacetDefinitionProcessors" />
            </list>
        </property>
    </bean>
   

    <context:component-scan base-package="de.ingrid">
        <!-- STEMMER: Exclude autocreation of stemmers ! We explicitly create stemmer via xml then used in auto wiring ! -->
        <context:exclude-filter type="regex" expression="de.ingrid.admin.search.*Stemmer*" />
    </context:component-scan>
    
    <mvc:annotation-driven/>
    <mvc:resources mapping="/css/**" location="/css/" />
    <mvc:resources mapping="/img/**" location="/img/" />

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
		<property name="maxUploadSize" value="1000000"/> 
	</bean> 
    
</beans>